package <%-package%>Controller

import (
    "github.com/gofiber/fiber/v2"
	<% Object.keys(imports).forEach(function(imported) { %>
	<%-imports[imported]%> <% }); 
	%>
    <% if (isDevEnv === true) { %>"fmt"<%}%>
)

<%-actionStructs.create%>
<%-actionStructs.read%>
<%-actionStructs.update%>
<%-actionStructs.delete%>


// Create<%-modelTitleCase%> godoc
// @Summary      Create <%-modelTitleCase%>
// @Description  Create <%-modelTitleCase%> for <%-package%>
// @Tags         <%-package%>-controller
<% if (actionStructs.create !== undefined) { %>
// @Accept       json
// @Param        create<%-modelTitleCase%>      body   Create<%=modelTitleCase%>Struct   true   "Create<%=modelTitleCase%>Struct object that needs to be created"
  <% } %>
// @Produce      json
// @Router       /<%-package%>/<%-modelCamelCase%> [post]
func Create<%-modelTitleCase%>(c *fiber.Ctx) error {
    <% if (isDevEnv === true) { %>
        fmt.Println("Create<%-modelTitleCase%>")
        return c.JSON(fiber.Map{"status": "success", "message": fmt.Sprintf("Create<%-modelTitleCase%>"), "data": nil})
      <% } else { %>
        return nil
      <% } %>
}

// Read<%-modelTitleCase%> godoc
// @Summary      Read <%-modelTitleCase%>
// @Description  Read <%-modelTitleCase%> for <%-package%>
// @Tags         <%-package%>-controller
// @Accept       json
// @Produce      json
// @Router       /<%-package%>/<%-modelCamelCase%> [get]
func Read<%-modelTitleCase%>(c *fiber.Ctx) error {
    <% if (isDevEnv === true) { %>
        fmt.Println("Read<%-modelTitleCase%>")
        return c.JSON(fiber.Map{"status": "success", "message": fmt.Sprintf("Read<%-modelTitleCase%>"), "data": nil})
      <% } else { %>
        return nil
      <% } %>
}

// Delete<%-modelTitleCase%> godoc
// @Summary      Delete <%-modelTitleCase%>
// @Description  Delete <%-modelTitleCase%> for <%-package%>
// @Tags         <%-package%>-controller
// @Accept       json
// @Produce      json
// @Router       /<%-package%>/<%-modelCamelCase%> [delete]
func Delete<%-modelTitleCase%>(c *fiber.Ctx) error {
    <% if (isDevEnv === true) { %>
        fmt.Println("Delete<%-modelTitleCase%>")
        return c.JSON(fiber.Map{"status": "success", "message": fmt.Sprintf("Delete<%-modelTitleCase%>"), "data": nil})
      <% } else { %>
        return nil
      <% } %>
}

// Update<%-modelTitleCase%> godoc
// @Summary      Update <%-modelTitleCase%>
// @Description  Update <%-modelTitleCase%> for <%-package%>
// @Tags         <%-package%>-controller
// @Accept       json
// @Produce      json
// @Router       /<%-package%>/<%-modelCamelCase%> [patch]
func Update<%-modelTitleCase%>(c *fiber.Ctx) error {
    <% if (isDevEnv === true) { %>
        fmt.Println("Update<%-modelTitleCase%>")
        return c.JSON(fiber.Map{"status": "success", "message": fmt.Sprintf("Update<%-modelTitleCase%>"), "data": nil})
      <% } else { %>
        return nil
      <% } %>
}



/// routeFunc
/*{
  instance := &<%-package%>ControllerPersistent.<%-packageTitleCase%>ControllerPersistent{}
  if i, ok := interface{}(instance).(<%-package%>ControllerPersistent.<%-packageTitleCase%>ControllerPersistentInterface); ok {
      method := reflect.ValueOf(i).MethodByName("<%-funcName%>")
      if method.IsValid() && !method.IsNil() {
          //i.<%-funcName%>(&fiber.Ctx{})
          wrapper := func(c *fiber.Ctx) error {
              result := method.Call([]reflect.Value{reflect.ValueOf(c)})
              if len(result) > 0 && !result[0].IsNil() {
                  return result[0].Interface().(error)
              }
              //if !result[0].IsNil() {
              //	return result[0].Interface().(error)
              //}
              // // If the result is nil, return a generic error
              // return fmt.Errorf("<%-funcName%> returned nil")
              return nil
          }
          // Use the wrapper function as the handler for the route
          <%-package%>.<%-subAction%>("/<%-modelCamelCase%>", wrapper)
      } else {
          <%-action%>("/<%-modelCamelCase%>", <%-funcNameStr%>)
      }
  } else {
      <%-action%>("/<%-modelCamelCase%>", <%-funcNameStr%>)
  }
}*/